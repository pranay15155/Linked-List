#include <bits/stdc++.h>
using namespace std;

#define ct cout 
#define el "\n"
#define pb push_back
#define li long long int
#define vec vector<li>
#define sp " "



class Node{
public:
    int data;
    Node *next;

public:
    Node(int data1,Node *next1){  //2 argument constructor
        data=data1;
        next=next1;
    }

public:
    Node(int data1){  //1 argument constructor
        data=data1;
        next=nullptr;
    }

};

Node * arr_to_linkedlist(vec v){
    Node *head=new Node(v[0]);
    Node *mover=head;
    for(int i=1;i<v.size();i++){
        Node *temp=new Node(v[i]);
        mover->next=temp;
        mover =temp;
    }
    return head;
}

void traversal(Node *head){
    Node *temp=head;
    while(temp!=NULL){
        ct<<temp->data<<sp;
        temp=temp->next;
    }
    ct<<el;
}

Node *removehead(Node *head){
    if(head==NULL)return head;
    head=head->next;
    return head;
}

Node *removetail(Node *head){
    if (head==NULL || head->next==NULL)return NULL;
    Node *temp=head;
    while(temp->next->next!=NULL){
        temp=temp->next;
    }
    temp->next=NULL;
    return head;
}

Node *removek(Node *head,int k){
    if(head==NULL)return NULL;
    if(k==1){
        Node*temp=head;
        head=head->next;
        free(temp);
        return head;
    }
    int count=0;
    Node*temp=head;
    Node*prev=NULL;
    while(temp!=NULL){
        count++;
        if (count==k)
        {
            prev->next=prev->next->next;
            free(temp);
            break;
        }
        prev=temp;
        temp=temp->next;
    }
    return head;
}

Node *remove_element(Node *head,int element){
    if(head==NULL)return NULL;
    if(head->data==element){
        Node*temp=head;
        head=head->next;
        free(temp);
        return head;
    }
    Node*temp=head;
    Node*prev=NULL;
    while(temp!=NULL){
        if (temp->data==element)
        {
            prev->next=prev->next->next;
            free(temp);
            break;
        }
        prev=temp;
        temp=temp->next;
    }
    return head;
}

Node *insert_at_head(Node*head,int value){
    Node *t=new Node(value,head);
    return t;
}

Node *insert_at_tail(Node *head,int value){
    if(head==NULL){
        Node *x=new Node(value);
        return x;
    }
    Node *temp=head;
    while(temp->next){
        temp=temp->next;
    }
    Node *x=new Node(value);
    temp->next=x;
    return head;
}

Node *insert_at_position(Node*head,int k,int value){
    if(head==NULL){
        if(k==1){
            return new Node(value);
        }
        else return NULL;
    }
    if(k==1){
        return new Node(value,head);
    }
    Node *temp=head;
    int count=0;
    while(temp){
    count++;
    if(count==k-1){
        Node *x=new Node(value,temp->next);
        temp->next=x;
    }
    temp=temp->next;
    }
    return head;
}

Node *insert_before_value(Node*head,int k,int value){
    if(head==NULL){
       return NULL;
    }
    if(k==head->data){
        return new Node(value,head);
    }
    Node *temp=head;
    while(temp->next){
    if(k==temp->next->data){
        Node *x=new Node(value,temp->next);
        temp->next=x;
        break;
    }
    temp=temp->next;
    }
    return head;
}

void pranay(){

    vec arr={1,2,3,4};
   
   Node *head=arr_to_linkedlist(arr);
   traversal(head);
  
   //DELETION OF THE HEAD OF LL***********************************
   // Node *a=removehead(head);
   // traversal(a);

   //DELETION OF THE TAIL OF LL***********************************
   // Node *b=removetail(head);
   // traversal(b);   

   //DELETION AT THE Kth position OF LL***********************************
   // Node *c=removek(head,3);
   // traversal(c);

   //DELETION OF A PARTICULAR ELEMENT  OF LL***********************************
    // Node *d=remove_element(head,6);
    // traversal(d);

   //INSERT AT HEAD *********************************************************
   // Node *w=insert_at_head(head,7);
   // traversal(w); 

   //INSERT AT TAIL *********************************************************
   // Node *x=insert_at_tail(head,7);
   // traversal(x); 
 
   //INSERTTION AT THE Kth position OF LL***********************************
   // Node *y=insert_at_position(head,3,8);
   // traversal(y);

   //INSERT A NODE  BEFORE VALUE K IN A LL**********************************
   Node *z=insert_before_value(head,4,7);
   traversal(z); 

}





int main()
{
ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL);
#ifndef ONLINE_JUDGE
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
#endif // ONLINE_JUDGE
    int t;
    cin >> t;
    while (t--)
    {
      pranay();
    }
    return 0;
}





